group_by(roundAge) %>%
tally()
ggplot(fvs, aes(x = roundAge)) +
geom_histogram()
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ageCounts <- fvs %>%
group_by(roundAge) %>%
tally()
ggplot(fvs, aes(x = roundAge)) +
geom_histogram(stat="count")
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ageCounts <- fvs %>%
group_by(roundAge) %>%
tally()
ageCounts
ggplot(fvs, aes(x = roundAge)) +
geom_histogram(stat="count")
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(fvs, aes(x = age)) +
geom_histogram(stat="count")
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(fvs, aes(x = roundAge)) +
geom_histogram(stat="count")
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(fvs, aes(x = age)) +
geom_histogram(stat="count", binwidth = 1)
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(fvs, aes(x = age)) +
geom_histogram(stat="count", binwidth = 2)
?geom_histogram
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(fvs, aes(x = roundage)) +
geom_histogram(stat="count")
ggplot(fvs, aes(x = roundAge)) +
geom_histogram(stat="count")
fvs <- fvs %>%
mutate(roundAge = factor(round(age)))
ggplot(unique(fvs), aes(x = roundAge)) +
geom_histogram(stat="count")
?ggplot
fvsWide <- fvs %>%
mutate(roundAge = factor(round(age))) %>%
pivot_wider(names_from = condition, values_from_(hand.look))
fvsWide <- fvs %>%
mutate(roundAge = factor(round(age))) %>%
pivot_wider(names_from = condition, values_from_(hand.look))
unique(fvs$condition)
fvsFacesMedium <- fvs %>%
mutate(roundAge = factor(round(age))) %>%
filter(condition == "Faces_Plus")
fvsFacesMedium <- fvs %>%
mutate(roundAge = factor(round(age))) %>%
filter(condition == "Faces_Plus")
ggplot(fvsFacesMedium, aes(x=roundAge))+
geom_histogram(stat="count")
ggplot(fvs,aes(x = age, y = hand.look))+
geom_point()
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
geom_smooth()
?geom_smooth
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
geom_smooth(se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
geom_smooth(method = 'glm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("")+
geom_smooth(method = 'lm', se = F)
ggplot(fvsFacesMedium, aes(x=roundAge))+
geom_histogram(stat="count")+
xlab("Age (months)")
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("")+xlab("Age (months)")
head(fvs)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands")+xlab("Age (months)")
geom_smooth(method = 'lm', se = F)
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
palette("brewer")
?palette
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
scale_fill_brewer()
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
scale_fill_brewer(palette = "set1")
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
scale_fill_brewer(palette = "Set1")
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
scale_fill_brewer(palette = "Set1")
ggplot(fvs,aes(x = age, y = hand.look, color = condition))+
geom_point()+
ylab("Proportion Looking at Hands ")+xlab("Age (months)")+
geom_smooth(method = 'lm', se = F)+
scale_color_brewer(palette = "Set1")
count = 0 #running count of significant results
for (i in 1:10000){
norm=rnorm(30)
tTest=t.test(norm)
pVal=tTest$p.value #get p value from tTest
if(pVal< .05) #if the pValue is significant, add one to the count
count <- count+1
}
count/10000 #get proportion of significant results
# #max p value = 0.5
proportion1<-replicate(10000,as.numeric(double.sample(rnorm(30),.5)<.05),simplify = F)
sum(unlist(proportion1))/10000 #sum list and find proportion
#
# #max p value = 0.75
proportion2<-replicate(10000,as.numeric(double.sample(rnorm(30),.75)<.05),simplify = F)
sum(unlist(proportion2))/10000 #sum list and find proportion
# #max p value = 1 no upper bound for pValue
proportion3<-replicate(10000,as.numeric(double.sample(rnorm(30),1)<.05),simplify = F)
sum(unlist(proportion3))/10000 #sum list and find proportion
# #max p value = 0.5
proportion1<-replicate(10000,as.numeric(double.sample(rnorm(30),.5)<.05),simplify = F)
sum(unlist(proportion1))/10000 #sum list and find proportion
#
# #max p value = 0.75
proportion2<-replicate(10000,as.numeric(double.sample(rnorm(30),.75)<.05),simplify = F)
sum(unlist(proportion2))/10000 #sum list and find proportion
# #max p value = 1 no upper bound for pValue
proportion3<-replicate(10000,as.numeric(double.sample(rnorm(30),1)<.05),simplify = F)
sum(unlist(proportion3))/10000 #sum list and find proportion
### Pilot Data Preparation
####Load Relevant Libraries and Functions
library(tidyverse)
####Import data
setwd("/Users/Ethan/Documents/Stanford/Fall 2019/Psych 251/mandan2019/Data") #Set working directory
rawData <- read.csv("pilotBData.csv",stringsAsFactors = FALSE)
#### Data exclusion / filtering
#Rename column with randomizer data and rename values in the randomOrder column to reflect whether that participant saw the mindset questions or refugee questions first
rawData<-rawData %>% rename(randomOrder = "FL_4_DO") %>%
mutate(randomOrder=recode(randomOrder,'FL_18|Refugee'='mindsetsFirst','Refugee|FL_18'='refugeeFirst'))
filteredData <- filter(rawData, rawData$Citizen==1)
#filter out any participants who are not US Citizens per original paper
#### Prepare data for analysis - create columns etc.
filteredData <- filteredData %>% mutate(ID = row_number()) #give each row a participant ID
#Could not get qualtrics to export text and numeric data so decoding from numeric to string values for ethinicity field
filteredData$Ethnicity <- factor(filteredData$Ethnicity, levels = c(15,16,17,18,19,20,21), labels = c("European American", "African American", "Asian American", "Latin American", "Native American", "Multiracial", "Other"))
tidyData <- filteredData %>%
gather(Measure,Score,contains("Personal"),contains("Intell"),contains("Ref_"),contains("Pol"))
tidyData$Score<-as.numeric(tidyData$Score)
tidyData$Measure[contains("Personal",vars = tidyData$Measure)]<- "personalityMeasure"
tidyData$Measure[contains("Intell",vars = tidyData$Measure)]<- "intelligenceMeasure"
tidyData$Measure[contains("Ref",vars = tidyData$Measure)]<- "refugeeMeasure"
tidyData$Measure[contains("Pol",vars = tidyData$Measure)]<- "politicalMeasure"
#refer all questions within each measure by that measure instead of measure_questionNumber
modelData <-tidyData %>%
group_by(ID,randomOrder,Measure) %>%
summarise(meanScores=mean(Score,na.rm=T))
modelData <- modelData %>%
spread(Measure,meanScores)
#spread so each participant is in one row and mean scores for each measure are the columns
modelData
length(modelData$ID)
ageBreakdown <- filteredData %>%
summarise(Average=mean(as.numeric(Age)), SD=sd(as.numeric(Age)))
ageBreakdown
genderBreakdown <- filteredData %>%
group_by(Gender) %>%
summarise(Count=length(Gender), Percentage = length(Gender)/length(filteredData$Gender)*100)
genderBreakdown
ethnicityBreakdown <- filteredData %>%
group_by(Ethnicity) %>%
summarise(Count=length(Ethnicity), Percentage = length(Ethnicity)/length(filteredData$Ethnicity)*100)
ethnicityBreakdown
genderBreakdown <- filteredData %>%
group_by(Gender) %>%
summarise(Count=length(Gender), Percentage = length(Gender)/length(filteredData$Gender)*100)
genderBreakdown
filteredData$Gender
genderBreakdown <- filteredData %>%
group_by(Gender) %>%
summarise(Count=length(Gender), Percentage = length(Gender)/length(filteredData$Gender)*100)
genderBreakdown
filteredData$Gender
genderBreakdown <- filteredData %>%
group_by(Gender) %>%
summarise(Count=length(Gender), Percentage = length(Gender)/length(filteredData$Gender)*100)
genderBreakdown
### Pilot Data Preparation
####Load Relevant Libraries and Functions
library(tidyverse)
####Import data
setwd("/Users/Ethan/Documents/Stanford/Fall 2019/Psych 251/mandan2019/Data") #Set working directory
rawData <- read.csv("pilotBData.csv",stringsAsFactors = FALSE)
#### Data exclusion / filtering
#Rename column with randomizer data and rename values in the randomOrder column to reflect whether that participant saw the mindset questions or refugee questions first
rawData<-rawData %>% rename(randomOrder = "FL_4_DO") %>%
mutate(randomOrder=recode(randomOrder,'FL_18|Refugee'='mindsetsFirst','Refugee|FL_18'='refugeeFirst'))
filteredData <- filter(rawData, rawData$Citizen==1)
#filter out any participants who are not US Citizens per original paper
#### Prepare data for analysis - create columns etc.
filteredData <- filteredData %>% mutate(ID = row_number()) #give each row a participant ID
#Could not get qualtrics to export text and numeric data so decoding from numeric to string values for ethinicity field
filteredData$Ethnicity <- factor(filteredData$Ethnicity, levels = c(15,16,17,18,19,20,21), labels = c("European American", "African American", "Asian American", "Latin American", "Native American", "Multiracial", "Other"))
filteredData$Gender <- factor(filteredData$Gender,levels = c(11,12,13), labels = c("Female", "Male", "Other"))
tidyData <- filteredData %>%
gather(Measure,Score,contains("Personal"),contains("Intell"),contains("Ref_"),contains("Pol"))
tidyData$Score<-as.numeric(tidyData$Score)
tidyData$Measure[contains("Personal",vars = tidyData$Measure)]<- "personalityMeasure"
tidyData$Measure[contains("Intell",vars = tidyData$Measure)]<- "intelligenceMeasure"
tidyData$Measure[contains("Ref",vars = tidyData$Measure)]<- "refugeeMeasure"
tidyData$Measure[contains("Pol",vars = tidyData$Measure)]<- "politicalMeasure"
#refer all questions within each measure by that measure instead of measure_questionNumber
modelData <-tidyData %>%
group_by(ID,randomOrder,Measure) %>%
summarise(meanScores=mean(Score,na.rm=T))
modelData <- modelData %>%
spread(Measure,meanScores)
#spread so each participant is in one row and mean scores for each measure are the columns
modelData
filteredData$Gender
genderBreakdown <- filteredData %>%
group_by(Gender) %>%
summarise(Count=length(Gender), Percentage = length(Gender)/length(filteredData$Gender)*100)
genderBreakdown
model1 <- lm(refugeeMeasure ~ intelligenceMeasure, d=modelData)
summary(model1)
model2 <- lm(refugeeMeasure ~ intelligenceMeasure+politicalMeasure, d=modelData)
summary(model2)
model3 <- lm(refugeeMeasure ~ intelligenceMeasure+politicalMeasure+personalityMeasure, d=modelData)
summary(model3)
model4 <- lm(refugeeMeasure ~ intelligenceMeasure + politicalMeasure + personalityMeasure + randomOrder + personalityMeasure*randomOrder, d=modelData)
summary(model4)
comp = anova(model1,model2,model3,model4, test="Chisq")
comp
modelData %>%
ggplot(aes(x = intelligenceMeasure, y = refugeeMeasure, fill = randomOrder)) +
geom_jitter(aes(colour = randomOrder, alpha=0.01), width = 0.2, height = 0.4) +
geom_smooth(method=lm)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender) %>%
facet_grid(Gender~Ethnicity)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender)
ggplot(group, aes(x = Age, group = Ethnicity))+
geom_histogram() %>%
facet_grid(Gender)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender)
ggplot(group, aes(x = Age, group = Ethnicity))+
geom_histogram() +
facet_grid(Gender)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender)
ggplot(group, aes(x = Age, group = Ethnicity))+
geom_histogram() +
facet_grid(gender)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender)
group
# ggplot(group, aes(x = Age, group = Ethnicity))+
#   geom_histogram() +
#   facet_grid(Groupender)
group <- filteredData %>%
group_by(Age, Ethnicity, Gender) %>%
summarise(mean = mean(Pol_3))
group
# ggplot(group, aes(x = Age, group = Ethnicity))+
#   geom_histogram() +
#   facet_grid(Groupender)
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram() +
facet_grid(Gender)
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram()
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count")
### Pilot Data Preparation
####Load Relevant Libraries and Functions
library(tidyverse)
####Import data
setwd("/Users/Ethan/Documents/Stanford/Fall 2019/Psych 251/mandan2019/Data") #Set working directory
rawData <- read.csv("pilotData.csv",stringsAsFactors = FALSE) #Load Pilot A data
#rawData <- read.csv("pilotBData.csv",stringsAsFactors = FALSE) #Load Pilot B data
#### Data exclusion / filtering
#Rename column with randomizer data and rename values in the randomOrder column to reflect whether that participant saw the mindset questions or refugee questions first
rawData<-rawData %>% rename(randomOrder = "FL_4_DO") %>%
mutate(randomOrder=recode(randomOrder,'FL_18|Refugee'='mindsetsFirst','Refugee|FL_18'='refugeeFirst'))
filteredData <- filter(rawData, rawData$Citizen==1)
#filter out any participants who are not US Citizens per original paper
#### Prepare data for analysis - create columns etc.
filteredData <- filteredData %>% mutate(ID = row_number()) #give each row a participant ID
#Could not get qualtrics to export text and numeric data so decoding from numeric to string values for ethinicity field
filteredData$Ethnicity <- factor(filteredData$Ethnicity, levels = c(15,16,17,18,19,20,21), labels = c("European American", "African American", "Asian American", "Latin American", "Native American", "Multiracial", "Other"))
filteredData$Gender <- factor(filteredData$Gender,levels = c(11,12,13), labels = c("Female", "Male", "Other"))
tidyData <- filteredData %>%
gather(Measure,Score,contains("Personal"),contains("Intell"),contains("Ref_"),contains("Pol"))
tidyData$Score<-as.numeric(tidyData$Score)
tidyData$Measure[contains("Personal",vars = tidyData$Measure)]<- "personalityMeasure"
tidyData$Measure[contains("Intell",vars = tidyData$Measure)]<- "intelligenceMeasure"
tidyData$Measure[contains("Ref",vars = tidyData$Measure)]<- "refugeeMeasure"
tidyData$Measure[contains("Pol",vars = tidyData$Measure)]<- "politicalMeasure"
#refer all questions within each measure by that measure instead of measure_questionNumber
modelData <-tidyData %>%
group_by(ID,randomOrder,Measure) %>%
summarise(meanScores=mean(Score,na.rm=T))
modelData <- modelData %>%
spread(Measure,meanScores)
#spread so each participant is in one row and mean scores for each measure are the columns
modelData
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count")
firstGroup <- d %>%
filter(!is.na(decision)) %>%
group_by(country, condition, eq.uneq,actor.gender) %>%
summarise(pctAccept=mean(decision=="accept",na.rm = TRUE))
firstGroup
ggplot(d, aes(x=actor.age.years, group = country))+
geom_histogram()+
facet_wrap(.~country)
ggplot(d, aes(x=actor.gender, group = country))+
geom_histogram(stat="count") +
facet_wrap(.~country)
ggplot(d, aes(x=decision, group = country))+
geom_histogram(stat="count") +
facet_wrap(.~country)
ggplot(firstGroup, aes(x = country, y = pctAccept, fill = eq.uneq)) +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_brewer(palette = "Set1") +
facet_wrap(.~condition)
ggplot(firstGroup, aes(x = country, y = pctAccept, fill = eq.uneq)) +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_brewer(palette = "Set1") +
facet_grid(actor.gender~condition)
secondGroup <- d %>%
filter(!is.na(decision)) %>%
group_by(actor.age.years, condition, eq.uneq,actor.gender) %>%
summarise(pctAccept=mean(decision=="accept",na.rm = TRUE))
secondGroup
ggplot(secondGroup, aes(x = actor.age.years, y = pctAccept,color = actor.gender)) +
geom_line() +
scale_fill_brewer(palette = "Set1") +
facet_grid(eq.uneq~condition)
ggplot(d, aes(x=actor.gender, group = country))+
geom_histogram(stat="count") +
facet_wrap(.~country)
ggplot(d, aes(x=actor.gender, group = country))+
geom_histogram(stat="count") +
facet_wrap(.~country)
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count") +
facet_wrap(.~Ethnicity)
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count") +
facet_grid(Gender~Ethnicity)
### Pilot Data Preparation
####Load Relevant Libraries and Functions
library(tidyverse)
####Import data
setwd("/Users/Ethan/Documents/Stanford/Fall 2019/Psych 251/mandan2019/Data") #Set working directory
rawData <- read.csv("pilotData.csv",stringsAsFactors = FALSE) #Load Pilot A data
#rawData <- read.csv("pilotBData.csv",stringsAsFactors = FALSE) #Load Pilot B data
#### Data exclusion / filtering
#Rename column with randomizer data and rename values in the randomOrder column to reflect whether that participant saw the mindset questions or refugee questions first
rawData<-rawData %>% rename(randomOrder = "FL_4_DO") %>%
mutate(randomOrder=recode(randomOrder,'FL_18|Refugee'='mindsetsFirst','Refugee|FL_18'='refugeeFirst'))
filteredData <- filter(rawData, rawData$Citizen==1)
#filter out any participants who are not US Citizens per original paper
#### Prepare data for analysis - create columns etc.
filteredData <- filteredData %>% mutate(ID = row_number()) #give each row a participant ID
#Could not get qualtrics to export text and numeric data so decoding from numeric to string values for ethinicity field
filteredData$Ethnicity <- factor(filteredData$Ethnicity, levels = c(15,16,17,18,19,20,21), labels = c("European American", "African American", "Asian American", "Latin American", "Native American", "Multiracial", "Other"))
# filteredData$Gender <- factor(filteredData$Gender,levels = c(11,12,13), labels = c("Female", "Male", "Other"))
tidyData <- filteredData %>%
gather(Measure,Score,contains("Personal"),contains("Intell"),contains("Ref_"),contains("Pol"))
tidyData$Score<-as.numeric(tidyData$Score)
tidyData$Measure[contains("Personal",vars = tidyData$Measure)]<- "personalityMeasure"
tidyData$Measure[contains("Intell",vars = tidyData$Measure)]<- "intelligenceMeasure"
tidyData$Measure[contains("Ref",vars = tidyData$Measure)]<- "refugeeMeasure"
tidyData$Measure[contains("Pol",vars = tidyData$Measure)]<- "politicalMeasure"
#refer all questions within each measure by that measure instead of measure_questionNumber
modelData <-tidyData %>%
group_by(ID,randomOrder,Measure) %>%
summarise(meanScores=mean(Score,na.rm=T))
modelData <- modelData %>%
spread(Measure,meanScores)
#spread so each participant is in one row and mean scores for each measure are the columns
modelData
# group <- filteredData %>%
#   group_by(Age, Ethnicity, Gender) %>%
#   summarise(mean = mean(Pol_3))
#
# group
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count") +
facet_grid(Gender~Ethnicity)
### Pilot Data Preparation
####Load Relevant Libraries and Functions
library(tidyverse)
####Import data
setwd("/Users/Ethan/Documents/Stanford/Fall 2019/Psych 251/mandan2019/Data") #Set working directory
#rawData <- read.csv("pilotData.csv",stringsAsFactors = FALSE) #Load Pilot A data
rawData <- read.csv("pilotBData.csv",stringsAsFactors = FALSE) #Load Pilot B data
#### Data exclusion / filtering
#Rename column with randomizer data and rename values in the randomOrder column to reflect whether that participant saw the mindset questions or refugee questions first
rawData<-rawData %>% rename(randomOrder = "FL_4_DO") %>%
mutate(randomOrder=recode(randomOrder,'FL_18|Refugee'='mindsetsFirst','Refugee|FL_18'='refugeeFirst'))
filteredData <- filter(rawData, rawData$Citizen==1)
#filter out any participants who are not US Citizens per original paper
#### Prepare data for analysis - create columns etc.
filteredData <- filteredData %>% mutate(ID = row_number()) #give each row a participant ID
#Could not get qualtrics to export text and numeric data so decoding from numeric to string values for ethinicity field
filteredData$Ethnicity <- factor(filteredData$Ethnicity, levels = c(15,16,17,18,19,20,21), labels = c("European American", "African American", "Asian American", "Latin American", "Native American", "Multiracial", "Other"))
filteredData$Gender <- factor(filteredData$Gender,levels = c(11,12,13), labels = c("Female", "Male", "Other"))
tidyData <- filteredData %>%
gather(Measure,Score,contains("Personal"),contains("Intell"),contains("Ref_"),contains("Pol"))
tidyData$Score<-as.numeric(tidyData$Score)
tidyData$Measure[contains("Personal",vars = tidyData$Measure)]<- "personalityMeasure"
tidyData$Measure[contains("Intell",vars = tidyData$Measure)]<- "intelligenceMeasure"
tidyData$Measure[contains("Ref",vars = tidyData$Measure)]<- "refugeeMeasure"
tidyData$Measure[contains("Pol",vars = tidyData$Measure)]<- "politicalMeasure"
#refer all questions within each measure by that measure instead of measure_questionNumber
modelData <-tidyData %>%
group_by(ID,randomOrder,Measure) %>%
summarise(meanScores=mean(Score,na.rm=T))
modelData <- modelData %>%
spread(Measure,meanScores)
#spread so each participant is in one row and mean scores for each measure are the columns
modelData
ggplot(filteredData, aes(x = Age, group = Ethnicity))+
geom_histogram(stat="count") +
facet_grid(Gender~Ethnicity)
fvs <- read_csv("data/FVS2011-hands.csv")
fvs <- read_csv("data/FVS2011-hands.csv")
#get histogram for only one condition since it's repeated measures
fvsFacesMedium <- fvs %>%
mutate(roundAge = factor(round(age))) %>%  #round the ages
filter(condition == "Faces_Plus")
ggplot(fvsFacesMedium, aes(x=roundAge))+
geom_histogram(stat="count")+
xlab("Age (months)")
?read_csv
fvs <- read_csv("data/FVS2011-hands.csv")
